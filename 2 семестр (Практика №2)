#include <iostream>
#include <cmath>
#include <iomanip>

double example_function(double x) {
    return pow(x, 3) - 0.2 * pow(x, 2) + 0.5 * x - 1;
}

double derivative_example_function(double x) {
    return 3 * pow(x, 2) - 0.4 * x + 0.5;
}

std::pair<double, int> tangent_method(double (*f)(double), double (*df)(double), double x0, double epsilon, int max_iter) {
    double x = x0;
    for (int i = 0; i < max_iter; ++i) {
        double f_x = f(x);
        double f_derivative = df(x);
        double x_new = x - f_x / f_derivative;

        if (fabs(x_new - x) < epsilon) {
            return {x_new, i + 1};
        }
        x = x_new;
    }
    return {NAN, max_iter}; // Возвращаем NaN, если корень не найден
}

int main() {
    double x0 = 1;
    double epsilon = 1e-6;
    int max_iter = 100;

    auto [root, iterations] = tangent_method(example_function, derivative_example_function, x0, epsilon, max_iter);

    std::cout << std::fixed << std::setprecision(12);
    if (!std::isnan(root)) {
        std::cout << "Корень уравнения: " << root << std::endl;
        std::cout << "Количество итераций: " << iterations << std::endl;
        double fun = example_function(root);
        std::cout << "Значения функции: f(" << root << ") = " << fun << std::endl;
    } else {
        std::cout << "Корень не найден за максимальное количество итераций." << std::endl;
    }

    return 0;
}
